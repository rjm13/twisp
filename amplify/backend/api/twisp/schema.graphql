# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User @model @auth(rules: [{ allow: private, operations: [create, delete, update, read]}]) {
  type: String 
  createdAt: String
  updatedAt: String
  id: ID! 
  name: String
  email: String
  imageUri: String
  bio: String
  publisherName: String
  website: String
  isPublisher: Boolean
  numAuthored: Int
  topthree: [String]
  following: [FollowConnection] @hasMany(indexName: "byFollower", fields: "id")
  followers: [FollowConnection] @hasMany(indexName: "byAuthor", fields: "id")
  Pinned: [PinnedStory] @hasMany(indexName: "byUser", fields: "id")
  Rated: [Rating] @hasMany (indexName: "byUser", fields: "id")
  Finished: [FinishedStory] @hasMany (indexName: "byUser", fields: "id")
  plan: String
  messageRec: [Message] @hasMany(indexName: "byUser", fields: "id")
  inProgressStories: [InProgressStory] @hasMany(indexName: "byUser", fields: "id")
  published: [Story] @hasMany(indexName: "byPublisher", fields: "id")
  setting1: Boolean
  setting2: Boolean
  setting3: Boolean
  setting4: String #this is the expo push token
  setting5: String
}

type CreatorProfile @model @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
{
    id: ID!
    type: String @index(name: "creatorsByType", queryField: "creatorsByType", sortKeyFields: ["updatedAt"]  )
    createdAt: String
    updatedAt: String
    userID: ID 
    user: User @hasOne (fields: ["userID"])
    imageUri: String
    bio: String
    penName: String
    website: String
    numAuthored: Int
    stories: [Story] @hasMany(indexName: "byCreatorProfile", fields: "id")
}

type FollowConnection @model @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
{
    id: ID!
    type: String
    createdAt: String
    updatedAt: String
    followerID: ID @index(name: "byFollower", queryField: "connectionsByFollower", sortKeyFields: ["updatedAt"])
    follower: User @hasOne (fields: ["followerID"])
    authorID: ID @index(name: "byAuthor", queryField: "connectionsByAuthor", sortKeyFields: ["createdAt"])
    author: User @hasOne (fields: ["authorID"])
}

type Story @model @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
{
  id: ID!
  type: String 
    @index(name: "storiesByDate", queryField: "storiesByDate", sortKeyFields: ["createdAt"]  )
    @index(name: "storiesByUpdated", queryField: "storiesByUpdated", sortKeyFields: ["updatedAt"]  )
  createdAt: String
  updatedAt: String
  title: String!
  imageUri: String
  audioUri: String!
  publisher: User @hasOne (fields: ["publisherID"])
  publisherID: ID @index(name: "byPublisher", queryField: "storiesByPublisher", sortKeyFields: ["createdAt"])
  creator: User @hasOne (fields: ["creatorID"])
  creatorID: ID @index(name: "byCreatorProfile", queryField: "storiesByCreator", sortKeyFields: ["createdAt"])
  author: String
  narrator: String
  artist: String
  time: Int
  summary: String
  description: String
  nsfw: Boolean
  comments: [Comment] @hasMany (indexName: "byStory", fields: ["id"])
  tags: [Tag] @manyToMany (relationName: "StoryTag")
  ratingAvg: Float
  ratingAmt: Int
  ratings: [Rating] @hasMany(indexName: "byStory", fields: ["id"])
  reactions: [Reaction] @hasMany(indexName: "byStory", fields: ["id"])
  genreID: ID @index(name: "byGenre", queryField: "storiesByGenre", sortKeyFields: ["createdAt"])
  genre: Genre @hasOne (fields: ["genreID"])
  hidden: Boolean
  status: Boolean
  numListens: Int
  approved: Boolean
  }

type Genre @model @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
{
  id: ID!
  genre: String!
  icon: String
  color: String
  imageUri: String
  tags: [Tag] @manyToMany (relationName: "GenreTag")
  eroticTags: [EroticTag] @manyToMany (relationName: "EroticaTag")
}

type Tag @model @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
  {
    id: ID!
    updatedAt: String
    createdAt: String
    type: String 
      @index(name: "tagsByCreated", queryField: "tagsByCreated", sortKeyFields: ["createdAt"])
      @index(name: "tagsByUpdated", queryField: "tagsByUpdated", sortKeyFields: ["updatedAt"])
    tagName: String!
    genre: [Genre] @manyToMany (relationName: "GenreTag")
    stories: [Story] @manyToMany(relationName: "StoryTag")
    count: Int
  }

  type EroticTag @model @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
  {
    id: ID!
    updatedAt: String
    createdAt: String
    type: String 
      @index(name: "EroticTagsByCreated", queryField: "EroticTagsByCreated", sortKeyFields: ["createdAt"])
      @index(name: "EroticTagsByUpdated", queryField: "EroticTagsByUpdated", sortKeyFields: ["updatedAt"])
    tagName: String!
    genre: [Genre] @manyToMany (relationName: "EroticaTag")
    count: Int
  }

type PinnedStory @model @auth( rules: [{ allow: private, operations: [create, delete, update, read]}])
{
  id: ID!
  type: String 
  userID: ID @index(name: "byUser", queryField: "pinnedStoriesByUser", sortKeyFields: ["createdAt"])
  user: User @hasOne (fields: ["userID"])
  storyID: ID
  story: Story @hasOne (fields: ["storyID"])
  createdAt: String
  updatedAt: String
}

type InProgressStory @model @auth( rules: [{ allow: private, operations: [create, delete, update, read]}])
{
  id: ID!
  type: String @index(name: "inProgressStoriesByUpdated", queryField: "inProgressStoriesByUpdated", sortKeyFields: [ "updatedAt" ])
  userID: ID @index(name: "byUser", queryField: "inProgressStoriesByUser", sortKeyFields: ["updatedAt"])
  user: User @hasOne (fields: ["userID"])
  storyID: ID
  story: Story @hasOne (fields: ["storyID"])
  createdAt: String
  updatedAt: String
  time: Int
}



type FinishedStory @model @auth( rules: [{ allow: private, operations: [create, delete, update, read]}])
{
  id: ID!
  type: String 
  createdAt: String
  updatedAt: String
  userID: ID @index(name: "byUser", queryField: "finishedStoriesByUser", sortKeyFields: ["createdAt"])
  user: User @hasOne (fields: ["userID"])
  storyID: ID @index(name: "byStory", sortKeyFields: ["createdAt"])
  story: Story @hasOne (fields: ["storyID"])
}

type Comment @model @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
  {
    id: ID!
    type: String 
      @index(name: "commentsByCreated", queryField: "commentsByCreated", sortKeyFields: ["createdAt"])
    createdAt: String
    updatedAt: String
    storyID: ID @index(name: "byStory", queryField: "commentsByStory", sortKeyFields: ["createdAt"])
    story: Story @hasOne (fields: ["storyID"])
    content: String!
    user: User @hasOne (fields: ["userID"])
    userID: ID 
    approved: Boolean
}

type Reaction @model @auth( rules: [{ allow: private, operations: [create, delete, update, read]}])
{
  id: ID!
  type: String
  createdAt: String
  updatedAt: String
  userID: ID
  user: User @hasOne (fields: ["userID"])
  storyID: ID @index(name: "byStory", queryField: "reactionsByStory", sortKeyFields: ["id"])
  story: User @hasOne (fields: ["storyID"])
  reaction: String
  icon: String
}

  type Rating @model @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
  {
    id: ID!
    createdAt: String
    updatedAt: String
    type: String @index(name: "ratingsByUpdated", queryField: "ratingsByUpdated", sortKeyFields: ["updatedAt"]  )
    storyID: ID! @index(name: "byStory", sortKeyFields: ["id"])
    story: Story @hasOne (fields: ["storyID"])
    userID: ID! @index(name: "byUser", queryField: "ratingsByUser", sortKeyFields: ["id"])
    user: User @hasOne (fields: ["userID"])
    rating: Int   
}

type Message @model @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
  {
    id: ID!
    type: String 
    createdAt: String
    updatedAt: String
    title: String
    subtitle: String
    content: String
    messageType: String
    status: String
    isReadByReceiver: Boolean
    receiver: User @hasOne (fields: ["receiverID"])
    receiverID: ID @index(name: "byUser", queryField: "messagesByUser", sortKeyFields: ["createdAt"])
}

